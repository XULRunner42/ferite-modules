/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*- */
/*
 * Copyright (C) 2003-2004 Christian M. Stamgren
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * o Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * o Neither the name of the mod_ferite software nor the names of its contributors may
 *   be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
 
uses "gettext.lib";
 
module-header
{

#include <libintl.h>
#include <locale.h>
	
#include "utility.h"

}

/**
 * @namespace Gettext
 * @brief The namespace for the Gettext module
 * @description This modules translates string into the user's language by looking up 
 *  the message in a message catalog.
 */
namespace Gettext 
{
	final static number LC_ALL = 1;
	final static number LC_MESSAGES = 2;
	final static number LC_CTYPE = 3;
	final static number LC_COLLATE = 4;
	final static number LC_MONETARY = 5;
	final static number LC_NUMERIC = 6;
	final static number LC_TIME = 7;

	/**
	 * @function setlocale
	 * @declaration function setlocale(number which, string value) 
	 * @brief Sets the users language for specified creteria.
	 * @param number which This will be one of Gettext.LC_ALL
	 *  Gettext.LC_MESSAGES, Gettext.LC_CTYPE, Gettext.LC_COLLATE,
	 *  Gettext.LC_MONETARY, Gettext.LC_NUMRERIC, Gettext.LC_TIME
	 * @param string value The locale value to be set.
	 * @return An empty string on failure or the specified locale on success
	 */
	native function setlocale(number which, string value) 
	{
		int category;
		char *retval;
		FeriteVariable *var;

		category = resolve_category((int)which);
		retval = setlocale(category, value->data);

		if (retval == NULL) retval = ""; /* failure */
		
		var = ferite_create_string_variable_from_ptr(script, "sellocale.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
		FE_RETURN_VAR(var);	
	}

	/**
	 * @function bindtextdomain
	 * @declaration function bindtextdomain(string domain, string dirname)
	 * @brief bind a textdomain to a message catalog
	 * @param string domain The domain to bind
	 * @param string dirname The directory to bind the domain against.
	 * @return String on failure an empty string on success the dirname
	 */
	native function bindtextdomain(string domain, string dirname) 
	{
		char *retval;
		FeriteVariable *var;
		
		retval = bindtextdomain(domain->data, dirname->data);
	
		var = ferite_create_string_variable_from_ptr(script, "bindtextdomain.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
	
		FE_RETURN_VAR(var);
	}

	/**
	 * @function textdomain
	 * @declaration function textdomain(string domain)
	 * @brief Change text domain
	 * @param string The domain to change to
	 * @return String, on failure an empty string, on success the new domain
	 */
	native function textdomain(string domain) 
	{
		char *retval;
		FeriteVariable *var;
	
		retval = textdomain(domain->data);
	
	    
		var = ferite_create_string_variable_from_ptr(script, "textdomain.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
	
		FE_RETURN_VAR(var);
	}

	/**
	 * @function gettext
	 * @declaration function gettext(string text) 
	 * @brief translate a text string by looking up the translation in a message catalog.
	 * @param String the string to translate
	 * @return String the translated string
	 */   
	function gettext(string text) 
	{
		return _(text);
	}


	/**
	 * @function dgettext
	 * @declaration function dgettext(string domain, string msgid) 
	 * @brief translate a text string by looking up the translation in a message catalog in the specified domain.
	 * @param String the domain to translate the string from
	 * @param String the string to translate
	 * @return String the translated string
	 */
	native function dgettext(string domain, string msgid) 
	{
		char *retval;
		FeriteVariable *var;
	
		retval = dgettext(domain->data, msgid->data);
	
		var = ferite_create_string_variable_from_ptr(script, "dgettext.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
	
		FE_RETURN_VAR(var);	     
	}

	/**
	 * @function dcgettext
	 * @declaration function dcgettext(string domain, string msgid, number category) 
	 * @brief translate a text string by looking up the translation in a message catalog in the specified domain
	 * use the specified category.
	 * @param String the domain to translate the string from
	 * @param String the string to translate
	 * @param String the category 
	 * @return String the translated string
	 */
	native function dcgettext(string domain, string msgid, number category) 
	{
		char *retval;
		FeriteVariable *var;
	
		retval = dcgettext(domain->data, msgid->data, resolve_category((int) category));
	
		var = ferite_create_string_variable_from_ptr(script, "dgettext.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
	
		FE_RETURN_VAR(var);	     
	}

	/**
	 * @function ngettext
	 * @declaration function ngettext(string msgid, string msgidp,  number n)
	 * @brief translate a text string by looking up the plural translation in a message catalog.
	 * @param String the string to translate
	 * @param String the string to translate in plural
	 * @param The plural number
	 * @return String the translated string
	 */
	native function ngettext(string msgid, string msgidp,  number n) 
	{
		char *retval;
		FeriteVariable *var;
	
		retval = ngettext(msgid->data, msgidp->data, (int) n);
	
		var = ferite_create_string_variable_from_ptr(script, "ngettext.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
	
		FE_RETURN_VAR(var);	     
	}

	/**
	 * @function dngettext
	 * @declaration function dngettext(string domain, string msgid, string msgidp, number n) 
	 * @brief translate a text string by looking up the plural translation in a message catalog in the specified domain.
	 * @param String the domain to translate the string from
	 * @param String the string to translate
	 * @param String the string to translate in plural
	 * @param The plural number
	 * @return String the translated string
	 */
	native function dngettext(string domain, string msgid, string msgidp, number n) 
	{
		char *retval;
		FeriteVariable *var;
	
		retval = dngettext(domain->data, msgid->data, msgidp->data, (int)n);
	
		var = ferite_create_string_variable_from_ptr(script, "dgettext.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
	
		FE_RETURN_VAR(var);	     
	}

	/**
	 * @function dcngettext
	 * @declaration function dcngettext(string domain, string msgid, string msgidp, number n, number category) 
	 * @brief translate a text string by looking up the plural translation in a message catalog in the specified domain
	 * use the specified category.
	 * @param String the domain to translate the string from
	 * @param String the string to translate
	 * @param String the string to translate in plural
	 * @param The plural number
	 * @param String the category
	 * @return String the translated string
	 */
	native function dcngettext(string domain, string msgid, string msgidp, number n, number category) 
	{
		char *retval;
		FeriteVariable *var;
	
		retval = dcngettext(domain->data, msgid->data, msgidp->data, (int)n, resolve_category((int) category));
		
		var = ferite_create_string_variable_from_ptr(script, "dgettext.retval", 
							     retval, strlen(retval), 
							     FE_CHARSET_DEFAULT, FE_ALLOC);
		
		FE_RETURN_VAR(var);	     
	}
} 
/**
 * @end
 */

/**
 * @group gettext.Extra
 * @brief These functions exist within the Gettext module but sit in the top level script namespace
 */
/**
 * @function _
 * @declaration function _(string text) 
 * @brief translate a text string by looking up the translation in a message catalog This is the same as 
 * the gettext function provided for easier implementations..
 * @param string text the string to translate
 * @return String the translated string
 */
native function _(string msgid) 
{
	char *retval;
	FeriteVariable *var;
	
	retval = gettext(msgid->data);
	
	var = ferite_create_string_variable_from_ptr(script, "_.retval", 
			retval, strlen(retval), FE_CHARSET_DEFAULT, FE_ALLOC);
	
	FE_RETURN_VAR(var);	     
}
/**
 @end
*/
